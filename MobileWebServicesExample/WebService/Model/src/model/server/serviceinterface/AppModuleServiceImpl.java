package model.server.serviceinterface;

import java.lang.reflect.Method;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.ejb.Remote;
import javax.ejb.Stateless;

import javax.interceptor.Interceptors;

import model.AppModuleImpl;

import model.common.serviceinterface.AppModuleService;

import model.vo.common.CandyViewSDO;
import model.vo.common.JDemoViewSDO;
import model.vo.common.WidgetViewSDO;

import oracle.jbo.common.Diagnostic;
import oracle.jbo.common.sdo.SDOHelper;
import oracle.jbo.common.service.types.FindControl;
import oracle.jbo.common.service.types.FindCriteria;
import oracle.jbo.server.svc.ServiceContextInterceptor;
import oracle.jbo.server.svc.ServiceImpl;
import oracle.jbo.service.errors.ServiceException;

import oracle.webservices.annotations.PortableWebService;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 04 14:29:08 EDT 2014
// ---------------------------------------------------------------------
@Stateless(name="model.common.AppModuleServiceBean", mappedName="AppModuleServiceBean")
@Remote(AppModuleService.class)
@PortableWebService(targetNamespace="/model/common/", serviceName="AppModuleService", portName="AppModuleServiceSoapHttpPort",
    endpointInterface="model.common.serviceinterface.AppModuleService")
@Interceptors( { ServiceContextInterceptor.class })
public class AppModuleServiceImpl extends ServiceImpl implements AppModuleService {
    private static boolean _isInited = false;
    private static final Map _map = new HashMap();

    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleServiceImpl() {
        init();
        setApplicationModuleDefName("model.AppModule");
        setConfigurationName("AppModuleService");
    }

    /**
     * Generated method. Do not modify. Do initialization in the constructor
     */
    protected void init() {
        if (_isInited) {
            return;
        }
        synchronized (AppModuleServiceImpl.class) {
            if (_isInited) {
                return;
            }
            try {
                SDOHelper.INSTANCE.defineSchema("model/common/serviceinterface/", "AppModuleService.xsd");
                _map.put("whoseYourDaddy", AppModuleImpl.class.getMethod("whoseYourDaddy", new Class[] { }));
                _isInited = true;
            } catch (Exception ex) {
                Diagnostic.printStackTrace(ex);
            }
        }
    }

    /**
     * whoseYourDaddy: generated method. Do not modify.
     */
    public String whoseYourDaddy() throws ServiceException {
        return (String)invokeCustom((Method)_map.get("whoseYourDaddy"), new Object[] { }, new String[] { }, false);
    }

    /**
     * findCandyView1: generated method. Do not modify.
     */
    public List<CandyViewSDO> findCandyView1(FindCriteria findCriteria,
                                             FindControl findControl) throws ServiceException {
        return (List<CandyViewSDO>)find(findCriteria, findControl, "CandyView1", CandyViewSDO.class);
    }

    /**
     * findJDemoView1: generated method. Do not modify.
     */
    public List<JDemoViewSDO> findJDemoView1(FindCriteria findCriteria,
                                             FindControl findControl) throws ServiceException {
        return (List<JDemoViewSDO>)find(findCriteria, findControl, "JDemoView1", JDemoViewSDO.class);
    }

    /**
     * createWidgetView1: generated method. Do not modify.
     */
    public WidgetViewSDO createWidgetView1(WidgetViewSDO widgetView1) throws ServiceException {
        return (WidgetViewSDO)create(widgetView1, "WidgetView1");
    }

    /**
     * updateWidgetView1: generated method. Do not modify.
     */
    public WidgetViewSDO updateWidgetView1(WidgetViewSDO widgetView1) throws ServiceException {
        return (WidgetViewSDO)update(widgetView1, "WidgetView1");
    }

    /**
     * findWidgetView1: generated method. Do not modify.
     */
    public List<WidgetViewSDO> findWidgetView1(FindCriteria findCriteria,
                                               FindControl findControl) throws ServiceException {
        return (List<WidgetViewSDO>)find(findCriteria, findControl, "WidgetView1", WidgetViewSDO.class);
    }
}
